# Generated by Django 4.2 on 2023-04-23 10:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the artist name', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the client's Name", max_length=30)),
                ('personalid', models.CharField(help_text="Enter the client's ID", max_length=8, validators=[django.core.validators.MinLengthValidator(8)])),
                ('mobile', models.CharField(help_text="Enter the client's Mobile Phone", max_length=9, validators=[django.core.validators.MinLengthValidator(9)])),
                ('email', models.EmailField(default='none@none.com', help_text='Enter the clients Mobile Phone', max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Cost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=2, help_text='Enter the price', max_digits=6)),
            ],
        ),
        migrations.CreateModel(
            name='CostEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ambiente', models.ForeignKey(help_text='Select the cost ambience for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ambiencecost', to='tickets.cost')),
                ('apdayc', models.ForeignKey(help_text='Select the  apdayc cost for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='apdayccost', to='tickets.cost')),
                ('artist', models.ForeignKey(help_text='Select the artist cost for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='performercost', to='tickets.cost')),
                ('extrasartistas', models.ForeignKey(help_text='Select the extra performers cost for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='extraperformercost', to='tickets.cost')),
                ('impuestos', models.ForeignKey(help_text='Select the tax cost for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='taxcost', to='tickets.cost')),
                ('local', models.ForeignKey(help_text='Select the localation oost for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='localcost', to='tickets.cost')),
                ('logistica', models.ForeignKey(help_text='Select the logistics cost for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='logisticscost', to='tickets.cost')),
                ('marketing', models.ForeignKey(help_text='Select the marketing cost for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='marketingcost', to='tickets.cost')),
                ('otros', models.ForeignKey(help_text='Select the others cost for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='otherscost', to='tickets.cost')),
                ('publicidad', models.ForeignKey(help_text='Select the publicity cost for this group', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='publicitycost', to='tickets.cost')),
            ],
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the floor name', max_length=30)),
                ('internalname', models.CharField(help_text='Enter the internal name for the floor', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a event genre (e.g. Theater, Concert, etc)', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the location name', max_length=30)),
                ('address', models.CharField(help_text='Enter the location address', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Promoter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the promoter name', max_length=30)),
                ('personalid', models.CharField(help_text='Enter the clients ID', max_length=8, validators=[django.core.validators.MinLengthValidator(8)])),
                ('mobile', models.CharField(help_text='Enter the clients Mobile Phone', max_length=9, validators=[django.core.validators.MinLengthValidator(9)])),
                ('email', models.EmailField(default='none@none.com', help_text='Enter the clients Mobile Phone', max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('price', models.ForeignKey(help_text='Select the price for this seat', on_delete=django.db.models.deletion.PROTECT, to='tickets.cost')),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the section name', max_length=30)),
                ('internalname', models.CharField(help_text='Enter the internal name for the section', max_length=20)),
                ('floor', models.ForeignKey(help_text='Select for this for this section', on_delete=django.db.models.deletion.PROTECT, to='tickets.floor')),
            ],
        ),
        migrations.CreateModel(
            name='SeatInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internalid', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular seat')),
                ('name', models.CharField(help_text='Enter the seat name for event', max_length=20)),
                ('internalname', models.CharField(help_text='Enter the internal name for the seat', max_length=30)),
                ('datepurchase', models.DateField(blank=True, help_text='Date of purchase', null=True)),
                ('datepayment', models.DateField(blank=True, help_text='Date of payment', null=True)),
                ('observations', models.CharField(blank=True, help_text='observations', max_length=200, null=True)),
                ('status', models.CharField(choices=[('s', 'Sold'), ('m', 'Marketing'), ('i', 'Invitee'), ('a', 'Available'), ('r', 'Reserved')], default='a', help_text='Seat availability', max_length=1)),
                ('client', models.ForeignKey(blank=True, help_text='Client who purchased', null=True, on_delete=django.db.models.deletion.PROTECT, to='tickets.client')),
                ('promoter', models.ForeignKey(help_text='User who sell the seat', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tickets.promoter')),
                ('seat', models.ForeignKey(help_text='seat template to be used', on_delete=django.db.models.deletion.PROTECT, to='tickets.seat')),
                ('section', models.ForeignKey(help_text='section to be used', on_delete=django.db.models.deletion.PROTECT, to='tickets.section')),
                ('whoPayment', models.ForeignKey(help_text='User who register the payment', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='whoPayment', to=settings.AUTH_USER_MODEL)),
                ('whoRegister', models.ForeignKey(help_text='User who register the purchase', on_delete=django.db.models.deletion.PROTECT, related_name='whoRegister', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['datepurchase', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LocationInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the location name', max_length=30)),
                ('internalname', models.CharField(help_text='Enter the internal name for the location', max_length=20)),
                ('cost', models.ForeignKey(blank=True, help_text='Select the rent price', null=True, on_delete=django.db.models.deletion.PROTECT, to='tickets.cost')),
                ('location', models.ForeignKey(help_text='Select a location template', null=True, on_delete=django.db.models.deletion.PROTECT, to='tickets.location')),
            ],
        ),
        migrations.AddField(
            model_name='floor',
            name='location',
            field=models.ForeignKey(help_text='Select a location FOR THIS SECTION', on_delete=django.db.models.deletion.PROTECT, to='tickets.locationinstance'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internalid', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for the event')),
                ('internalname', models.CharField(help_text='Enter the internal name for event', max_length=30)),
                ('name', models.CharField(help_text='Enter the name for event', max_length=20)),
                ('datecreation', models.DateField(help_text='Date of creation')),
                ('dateevent', models.DateField(blank=True, help_text='Date of event', null=True)),
                ('observations', models.CharField(blank=True, help_text='Observations', max_length=200, null=True)),
                ('status', models.CharField(choices=[('s', 'Soldout'), ('p', 'Private'), ('a', 'Available'), ('c', 'Canceled'), ('f', 'Finished')], default='a', help_text='Event availability', max_length=1)),
                ('artist', models.ManyToManyField(help_text='Select the performers for this event', to='tickets.artist')),
                ('costs', models.ForeignKey(blank=True, help_text='Select the costs for this event', null=True, on_delete=django.db.models.deletion.PROTECT, to='tickets.costevent')),
                ('genre', models.ManyToManyField(help_text='Select a genre for this event', to='tickets.genre')),
                ('location', models.ForeignKey(help_text='Select a location FOR THIS event', on_delete=django.db.models.deletion.PROTECT, to='tickets.locationinstance')),
                ('whoRegister', models.ForeignKey(help_text='User who register the creation of the event', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['dateevent', 'name'],
                'permissions': (('can_mark_returned', 'Set book as returned'),),
            },
        ),
        migrations.CreateModel(
            name='ArtistGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the artist group's Name", max_length=30)),
                ('artists', models.ManyToManyField(help_text='Select the artists for this group', to='tickets.artist')),
                ('cost', models.ManyToManyField(help_text='Select the cost for this group', to='tickets.cost')),
                ('genre', models.ManyToManyField(help_text='Select a genre for this group', to='tickets.genre')),
            ],
        ),
    ]
